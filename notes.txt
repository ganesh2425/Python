---data types ---
1. integer  - numbers
2. float    - decimals
3. boolean  - true/false
4. complex  - 1+3j
5. list     - []
6. tuple    - ()
7. set      - {}
8. dictionary   - {}

---control statements ---
Conditional statements
    if
    else
    elif
    nested if

Looping statements
    for
    while
    nested loops

Jumping statements
    pass
    contineos
    break

STRING -- collection of characters
types of strings
--> single quotes('')
--> double quotes("")
--> thriple quotes(''' ''')

string methods::
--> Lower()
--> Upper()
--> ends with()
--> starts with()
--> replace()
--> split()
--> count()
--> R strip()
--> L strip()
--> strip()
--> remove prefix()
--> remove surfix()
--> index()
--> find()


LISTS in python

Methods:
-->append : data will add end of the list
-->extend : multiple list data will add in end of the list
-->remove : it will remove the value in the list
-->pop    : it will remove the value in list based on index value
-->count : it will count how many times one value placed in list 
-->index  : it will provide values index number
-->insert : we add values in particular index
[start: stop: skip]


Dictionary:
-> dictionary is a data type in python
-> it will denoted by {}
-> key value data (k:v)
-> key should be immutable
-> value should be mutable (different types)
-> key will act as a index
-> keys are unique

Methods:
-> get()
-> update()
-> values()
-> keys()
-> items()

Set{}
-> it will denotes {}
-> do not allow duplicates
-> no index, un ordered
-> do not allow mutable types
ex: b = {2,4,6,7,'kiran'}

Methods:
-> add()
-> update()
-> pop()
-> remove()

set Operations:
-> union()
-> intersection()
-> difference()
-> issubset()
-> issuperset()

Functions:
-> block of code
-> run when it is called

syntax:
def add(a,b):
    return a+b
print(add(2+5))

nested function:
def outer():
    print("outer")
    def inner():
        print("inner")
    inner()

outer()

File handling:
--> Reading, writing, creating, deliting of a files is called file handling

modes:
-> r - read
-> w - write
-> a - append
-> r+ - read write
-> w+ - write read (truncate)

Error handling:
--> Interrupting normal execution of a code is called Error (or) exception.
    we will handle by using Error handling

Procedural Oriented Programming(POP):
-> programs are devided into Functions
-> top down approach
-> no access specifiers
-> no data security
-> no overloading concepts
ex: C, VB, Fortran, Pascal


Object Oriented Programming(OOP):
-> programs are devided into objects
-> bottom up appoach
-> provide access specifiers
-> data security
-> function overloading
-> operator overloading
-> method overriding
ex: C++, Java, Python

Class:
-> template
-> blue print of an objects

syntax:
class class_name():

Object:
-> physical entity
-> we can create any number of objects for class
-> memory is allocated when object is created


Inheritance:
--> parent to child

Types:
-> single inheritance --> pass data from parent to child
-> multilevel inheritance --> pass data from grandparent to parent, parent to child
                            p1 ->p2 ->c
-> multiple inheritance --> two or more parent classes only one child class
-> hierarchical inheritance --> one parent class multiple child classes


Encapsulation:
-> wrapping of variables and methods into single unit.
->

Polymorphism:
-> poly-many
-> morph-forms

Data abstraction:
-> hiding of information





